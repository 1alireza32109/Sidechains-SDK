package com.horizen

import java.io.FileOutputStream
import java.net.InetSocketAddress
import java.lang.{Byte => JByte, Long => JLong}
import java.util.{ArrayList => JArrayList, HashMap => JHashMap}

import javafx.util.{Pair => JPair}
import com.typesafe.config.Config
import net.ceedubs.ficus.Ficus._
import net.ceedubs.ficus.readers.ArbitraryTypeReader._
import com.horizen.block.{SidechainBlock, SidechainBlockSerializer}
import com.horizen.box.{NoncedBox, RegularBox}
import com.horizen.companion.SidechainTransactionsCompanion
import com.horizen.proof.Signature25519
import com.horizen.proposition.{Proposition, PublicKey25519Proposition}
import com.horizen.secret.{PrivateKey25519, PrivateKey25519Creator}
import com.horizen.transaction.{RegularTransaction, SidechainTransaction, TransactionSerializer}
import com.horizen.utils.BytesUtils
import scorex.core.settings.{ScorexSettings, SettingsReaders}
import scorex.core.settings.ScorexSettings.readConfigFromPath
import scorex.util.ScorexLogging
import scorex.util._

case class WebSocketClientSettings(
                                    remoteAddress: InetSocketAddress = new InetSocketAddress("127.0.0.1", 8888),
                                    connectionTimeout : Long = 5000,
                                    connectionTimeUnit :String = "MILLISECONDS")

case class SidechainSettings(scorexSettings: ScorexSettings, webSocketClientSettings: WebSocketClientSettings) {

  protected val sidechainTransactionsCompanion: SidechainTransactionsCompanion = SidechainTransactionsCompanion(new JHashMap[JByte, TransactionSerializer[SidechainTypes#SCBT]]())

  val secretKey = PrivateKey25519Creator.getInstance().generateSecret("genesis_seed%d".format(123).getBytes)

  val targetSecretKey1 = PrivateKey25519Creator.getInstance().generateSecret("target1".getBytes)
  val targetSecretKey2 = PrivateKey25519Creator.getInstance().generateSecret("target2".getBytes)

  private def getGenesisTransactions: Seq[SidechainTransaction[Proposition, NoncedBox[Proposition]]] = {
    val fee = 0
    val timestamp = 1547798549470L

    val from = new JArrayList[JPair[RegularBox, PrivateKey25519]]
    val to = new JArrayList[JPair[PublicKey25519Proposition, JLong]]

    val creator = PrivateKey25519Creator.getInstance

    from.add(new JPair[RegularBox, PrivateKey25519](new RegularBox(secretKey.publicImage, 1, 30000L), secretKey))

    to.add(new JPair[PublicKey25519Proposition, JLong](targetSecretKey1.publicImage, 10000L))
    to.add(new JPair[PublicKey25519Proposition, JLong](targetSecretKey2.publicImage, 20000L))

    val transaction = RegularTransaction.create(from, to, fee, timestamp)
    val id = transaction.id
    Seq(transaction.asInstanceOf[SidechainTransaction[Proposition, NoncedBox[Proposition]]])
  }

  lazy val genesisBlock : Option[SidechainBlock] = Some(
    new SidechainBlockSerializer(sidechainTransactionsCompanion).parseBytes(
      // Hex representation of Sidehcain block generated by commented code below and above.
      BytesUtils.fromHexString("0000000000000000000000000000000000000000000000000000000000000000aaf3d3d40b0200d00302ca03010000000000000000000001685ffb93de0000003202603cfbf879f515ff96c9031ebcbc006170dd6c30522a35d488c7472c4a75dc11480000000000000001000000000000753000000043044040bf126e8d1db806f1b7d6ec11449c7c9218228c80675c8a46ebcef53b57c4ee401d71af035aacbc874e10529cb5bf85e51f1d6583882d32d2a05683dfd776301600000000000027100000000000004e200000004302800154229da6c979d0168f1ac77e987a4161de6e587982088847284a88d41a7bb2f408384daa1273a31c4ab08ab68b3bf012d6368a4ec95350496a33fcec2c2cbd093cfbf879f515ff96c9031ebcbc006170dd6c30522a35d488c7472c4a75dc114812206a8569fbebf1f26e17291aca02c60cdbef0c71f44fb3ebf761d84a449b3c601237296efe6a92a9ba11995520c0f165b59e54f0107974dc1f3e0cd3687a00")
    )
  )

  /*Some(new SidechainBlock(
    SidechainSettings.genesisParentBlockId,
    1565162709L, // Wednesday, August 7, 2019 7:25:09 AM
    Seq(),
    getGenesisTransactions,
    secretKey.publicImage(),
    new Signature25519(BytesUtils.fromHexString(
      "28f65fdffb6a0ecffd308445e1ef551935e614a45be9dc936467abcd82297fd5856a3395ae5854e13de9db576a88422da39970a93f0b21ba5b659b3f6cae0100")
    ),
    sidechainTransactionsCompanion
   )
  )*/
}

object SidechainSettings
  extends ScorexLogging
    with SettingsReaders
{

  val genesisParentBlockId : scorex.core.block.Block.BlockId = bytesToId(new Array[Byte](32))

  def read(userConfigPath: Option[String]): SidechainSettings = {
    fromConfig(readConfigFromPath(userConfigPath, "scorex"))
    //new SidechainSettings(ScorexSettings.read(userConfigPath))
  }

  private def fromConfig(config: Config): SidechainSettings = {
    val webSocketClientSettings = config.as[WebSocketClientSettings]("scorex.websocket")
    val scorexSettings = config.as[ScorexSettings]("scorex")
    SidechainSettings(scorexSettings, webSocketClientSettings)
  }
  /*
  implicit val networkSettingsValueReader: ValueReader[SDKSettings] =
    (cfg: Config, path: String) => fromConfig(cfg.getConfig(path))
  */

  /*
  private def fromConfig(config: Config): HybridSettings = {
    log.info(config.toString)
    val walletSettings = config.as[WalletSettings]("scorex.wallet")
    val miningSettings = config.as[HybridMiningSettings]("scorex.miner")
    val scorexSettings = config.as[ScorexSettings]("scorex")
    HybridSettings(miningSettings, walletSettings, scorexSettings)
  }*/
}